{"version":3,"file":"walletconnect-connector.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport { IWalletConnectProviderOptions } from '@walletconnect/types'\n\nexport const URI_AVAILABLE = 'URI_AVAILABLE'\n\nexport class UserRejectedRequestError extends Error {\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    this.message = 'The user rejected the request.'\n  }\n}\n\nexport class WalletConnectConnector extends AbstractConnector {\n  public walletConnectProvider?: any\n\n  constructor(private readonly opts: IWalletConnectProviderOptions) {\n    super({ supportedChainIds: Object.keys(opts.rpc || {}).map(k => Number(k)) })\n\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n    this.handleDisconnect = this.handleDisconnect.bind(this)\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n\n  private handleDisconnect(): void {\n    if (__DEV__) {\n      console.log(\"Handling 'disconnect' event\")\n    }\n    this.emitDeactivate()\n    // we have to do this because of a @walletconnect/web3-provider bug\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.stop()\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n      this.walletConnectProvider = undefined\n    }\n\n    this.emitDeactivate()\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.walletConnectProvider) {\n      const WalletConnectProvider = await import('@walletconnect/web3-provider').then(m => m?.default ?? m)\n      this.walletConnectProvider = new WalletConnectProvider(this.opts)\n    }\n\n    // ensure that the uri is going to be available, and emit an event if there's a new uri\n    if (!this.walletConnectProvider.wc.connected) {\n      await this.walletConnectProvider.wc.createSession(this.opts.chainId ? { chainId: this.opts.chainId } : undefined)\n      this.emit(URI_AVAILABLE, this.walletConnectProvider.wc.uri)\n    }\n\n    let account: string\n    account = await new Promise<string>((resolve, reject) => {\n      const userReject = () => {\n        // Erase the provider manually\n        this.walletConnectProvider = undefined\n        reject(new UserRejectedRequestError())\n      }\n\n      // Workaround to bubble up the error when user reject the connection\n      this.walletConnectProvider.wc.on('disconnect', () => {\n        // Check provider has not been enabled to prevent this event callback from being called in the future\n        if (!account) {\n          userReject()\n        }\n      })\n\n      this.walletConnectProvider\n        .enable()\n        .then((accounts: string[]) => resolve(accounts[0]))\n        .catch((error: Error): void => {\n          // TODO ideally this would be a better check\n          if (error.message === 'User closed modal') {\n            userReject()\n            return\n          }\n          reject(error)\n        })\n    }).catch(err => {\n      throw err\n    })\n\n    this.walletConnectProvider.on('disconnect', this.handleDisconnect)\n    this.walletConnectProvider.on('chainChanged', this.handleChainChanged)\n    this.walletConnectProvider.on('accountsChanged', this.handleAccountsChanged)\n\n    return { provider: this.walletConnectProvider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.walletConnectProvider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.walletConnectProvider.send('eth_chainId')\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.walletConnectProvider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.stop()\n      this.walletConnectProvider.removeListener('disconnect', this.handleDisconnect)\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n    }\n  }\n\n  public async close() {\n    await this.walletConnectProvider?.close()\n  }\n}\n"],"names":["UserRejectedRequestError","name","_this","constructor","message","Error","WalletConnectConnector","opts","supportedChainIds","Object","keys","rpc","map","k","Number","handleChainChanged","_this2","bind","handleAccountsChanged","handleDisconnect","chainId","emitUpdate","accounts","account","emitDeactivate","this","walletConnectProvider","stop","removeListener","undefined","activate","Promise","resolve","reject","userReject","wc","on","enable","then","error","err","_this4","provider","connected","createSession","emit","uri","m","WalletConnectProvider","getProvider","getChainId","send","getAccount","deactivate","close","_this12$walletConnect","AbstractConnector"],"mappings":"i5CAMaA,8DAGJC,KAAOC,EAAKC,YAAYF,OACxBG,QAAU,sDAJ2BC,QAQjCC,yBAGkBC,8BACrB,CAAEC,kBAAmBC,OAAOC,KAAKH,EAAKI,KAAO,IAAIC,KAAI,SAAAC,UAAKC,OAAOD,oBAD5CN,IAGtBQ,mBAAqBC,EAAKD,mBAAmBE,aAC7CC,sBAAwBF,EAAKE,sBAAsBD,aACnDE,iBAAmBH,EAAKG,iBAAiBF,+CAGxCF,mBAAA,SAAmBK,QAIpBC,WAAW,CAAED,QAAAA,OAGZF,sBAAA,SAAsBI,QAIvBD,WAAW,CAAEE,QAASD,EAAS,QAG9BH,iBAAA,gBAIDK,iBAEDC,KAAKC,6BACFA,sBAAsBC,YACtBD,sBAAsBE,eAAe,eAAgBH,KAAKV,yBAC1DW,sBAAsBE,eAAe,kBAAmBH,KAAKP,4BAC7DQ,2BAAwBG,QAG1BL,oBAGMM,8BACNL,mCAWDF,yBACY,IAAIQ,SAAgB,SAACC,EAASC,OACtCC,EAAa,aAEZR,2BAAwBG,EAC7BI,EAAO,IAAIjC,MAIR0B,sBAAsBS,GAAGC,GAAG,cAAc,WAExCb,GACHW,SAICR,sBACFW,SACAC,MAAK,SAAChB,UAAuBU,EAAQV,EAAS,cACxC,SAACiB,GAEgB,sBAAlBA,EAAMnC,QAIV6B,EAAOM,GAHLL,iBAKC,SAAAM,SACDA,+BA3BRjB,MA8BKG,sBAAsBU,GAAG,aAAcK,EAAKtB,oBAC5CO,sBAAsBU,GAAG,eAAgBK,EAAK1B,sBAC9CW,sBAAsBU,GAAG,kBAAmBK,EAAKvB,uBAE/C,CAAEwB,SAAUD,EAAKf,sBAAuBH,QAAAA,2BAxC1CkB,EAAKf,sBAAsBS,GAAGQ,iCAC3BF,EAAKf,sBAAsBS,GAAGS,cAAcH,EAAKlC,KAAKa,QAAU,CAAEA,QAASqB,EAAKlC,KAAKa,cAAYS,uBAClGgB,KA5DkB,gBA4DEJ,EAAKf,sBAAsBS,GAAGW,4DARpDL,EAAKf,6CAC4B,8QAAO,qCAAgCY,MAAK,SAAAS,+BAAKA,SAAAA,aAAcA,qBAA7FC,KACDtB,sBAAwB,IAAIsB,EAAsBP,EAAKlC,kGA+CnD0C,kDACJxB,KAAKC,6DAGDwB,iDACJzB,KAAKC,sBAAsByB,KAAK,sDAG5BC,iDACJ3B,KAAKC,sBAAsByB,KAAK,gBAAgBb,MAAK,SAAChB,UAA+BA,EAAS,6CAGhG+B,WAAA,WACD5B,KAAKC,6BACFA,sBAAsBC,YACtBD,sBAAsBE,eAAe,aAAcH,KAAKN,uBACxDO,sBAAsBE,eAAe,eAAgBH,KAAKV,yBAC1DW,sBAAsBE,eAAe,kBAAmBH,KAAKP,2BAIzDoC,2DACL7B,KAAKC,8BAAL6B,EAA4BD,qEAjHME,2CAVf"}